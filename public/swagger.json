{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"AddressHiroObject": {
				"properties": {
					"non_fungible_tokens": {},
					"fungible_tokens": {},
					"stx": {
						"properties": {
							"burnchain_unlock_height": {
								"type": "number",
								"format": "double"
							},
							"burnchain_lock_height": {
								"type": "number",
								"format": "double"
							},
							"lock_height": {
								"type": "number",
								"format": "double"
							},
							"locked": {
								"type": "number",
								"format": "double"
							},
							"lock_tx_id": {
								"type": "string"
							},
							"total_received": {
								"type": "number",
								"format": "double"
							},
							"total_sent": {
								"type": "number",
								"format": "double"
							},
							"balance": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"burnchain_unlock_height",
							"burnchain_lock_height",
							"lock_height",
							"locked",
							"lock_tx_id",
							"total_received",
							"total_sent",
							"balance"
						],
						"type": "object"
					}
				},
				"required": [
					"non_fungible_tokens",
					"fungible_tokens",
					"stx"
				],
				"type": "object"
			},
			"AddressMempoolObject": {
				"properties": {
					"mempool_stats": {
						"properties": {
							"tx_count": {
								"type": "number",
								"format": "double"
							},
							"spent_txo_sum": {
								"type": "number",
								"format": "double"
							},
							"spent_txo_count": {
								"type": "number",
								"format": "double"
							},
							"funded_txo_sum": {
								"type": "number",
								"format": "double"
							},
							"funded_txo_count": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"tx_count",
							"spent_txo_sum",
							"spent_txo_count",
							"funded_txo_sum",
							"funded_txo_count"
						],
						"type": "object"
					},
					"chain_stats": {
						"properties": {
							"tx_count": {
								"type": "number",
								"format": "double"
							},
							"spent_txo_sum": {
								"type": "number",
								"format": "double"
							},
							"spent_txo_count": {
								"type": "number",
								"format": "double"
							},
							"funded_txo_sum": {
								"type": "number",
								"format": "double"
							},
							"funded_txo_count": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"tx_count",
							"spent_txo_sum",
							"spent_txo_count",
							"funded_txo_sum",
							"funded_txo_count"
						],
						"type": "object"
					},
					"address": {
						"type": "string"
					}
				},
				"required": [
					"mempool_stats",
					"chain_stats",
					"address"
				],
				"type": "object"
			},
			"AddressObject": {
				"properties": {
					"btcPubkeySegwit1": {
						"type": "string"
					},
					"btcPubkeySegwit0": {
						"type": "string"
					},
					"ordinalInfo": {
						"$ref": "#/components/schemas/AddressMempoolObject"
					},
					"cardinalInfo": {
						"$ref": "#/components/schemas/AddressMempoolObject"
					},
					"bnsNameInfo": {},
					"stacksTokenInfo": {
						"$ref": "#/components/schemas/AddressHiroObject"
					},
					"stxBalance": {
						"type": "number",
						"format": "double"
					},
					"sBTCBalance": {
						"type": "number",
						"format": "double"
					},
					"ordinal": {
						"type": "string"
					},
					"cardinal": {
						"type": "string"
					},
					"stxAddress": {
						"type": "string"
					}
				},
				"required": [
					"stxBalance",
					"sBTCBalance",
					"ordinal",
					"cardinal",
					"stxAddress"
				],
				"type": "object"
			},
			"CommitmentResponse": {
				"properties": {
					"inscriptionPayload": {
						"type": "string"
					},
					"recipientStxPrincipal": {
						"type": "string"
					},
					"commitTxId": {
						"type": "string"
					},
					"paymentPsbt": {
						"type": "string"
					},
					"commitAddress": {
						"type": "string"
					}
				},
				"required": [
					"commitAddress"
				],
				"type": "object"
			},
			"CommitmentRequest": {
				"properties": {
					"inscriptionPayload": {
						"type": "string"
					},
					"recipientStxPrincipal": {
						"type": "string"
					},
					"originator": {
						"type": "string"
					},
					"payFromAddress": {
						"type": "string"
					},
					"reclaimerPublicKey": {
						"type": "string"
					},
					"revealerPublicKey": {
						"type": "string"
					},
					"revealFee": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"originator",
					"reclaimerPublicKey",
					"revealerPublicKey",
					"revealFee"
				],
				"type": "object"
			},
			"Uint8Array": {
				"description": "A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the\r\nrequested number of bytes could not be allocated an exception is raised.",
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"TaprootScriptType": {
				"properties": {
					"tweakedPubkey": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/Uint8Array"
							}
						]
					},
					"tapMerkleRoot": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/Uint8Array"
							}
						]
					},
					"tapLeafScript": {},
					"tapInternalKey": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/Uint8Array"
							}
						]
					},
					"leaves": {},
					"wsh": {
						"type": "string"
					},
					"witnessScript": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/Uint8Array"
							}
						]
					},
					"redeemScript": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/Uint8Array"
							}
						]
					},
					"paymentType": {
						"type": "string"
					},
					"script": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/Uint8Array"
							}
						]
					},
					"address": {
						"type": "string"
					}
				},
				"required": [
					"paymentType",
					"address"
				],
				"type": "object"
			},
			"VoutI": {
				"properties": {
					"value": {
						"type": "number",
						"format": "double"
					},
					"scriptpubkey_address": {
						"type": "string"
					},
					"scriptpubkey_type": {
						"type": "string"
					},
					"scriptpubkey_asm": {
						"type": "string"
					},
					"scriptpubkey": {
						"type": "string"
					}
				},
				"required": [
					"value",
					"scriptpubkey_address",
					"scriptpubkey_type",
					"scriptpubkey_asm",
					"scriptpubkey"
				],
				"type": "object"
			},
			"CommitmentType": {
				"properties": {
					"commitTxId": {
						"type": "string"
					},
					"vout": {
						"$ref": "#/components/schemas/VoutI"
					},
					"vout0": {
						"$ref": "#/components/schemas/VoutI"
					},
					"taprootScript": {
						"$ref": "#/components/schemas/TaprootScriptType"
					},
					"requestType": {
						"type": "string"
					},
					"paidFromAddress": {
						"type": "string"
					},
					"updated": {
						"type": "number",
						"format": "double"
					},
					"created": {
						"type": "number",
						"format": "double"
					},
					"status": {
						"type": "number",
						"format": "double"
					},
					"network": {
						"type": "string"
					},
					"tries": {
						"type": "number",
						"format": "double"
					},
					"_id": {
						"type": "string"
					},
					"commitmentRequest": {
						"$ref": "#/components/schemas/CommitmentRequest"
					}
				},
				"required": [
					"taprootScript",
					"requestType",
					"updated",
					"created",
					"status",
					"network",
					"commitmentRequest"
				],
				"type": "object"
			},
			"PSBTHolder": {
				"properties": {
					"txFee": {
						"type": "number",
						"format": "double"
					},
					"b64PSBT": {
						"type": "string"
					},
					"hexPSBT": {
						"type": "string"
					}
				},
				"required": [
					"txFee",
					"b64PSBT",
					"hexPSBT"
				],
				"type": "object"
			},
			"RevealerTxModes": {
				"enum": [
					0,
					1
				],
				"type": "number"
			},
			"RevealerTxTypes": {
				"enum": [
					0,
					1
				],
				"type": "number"
			},
			"RevealerTransaction": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"txId": {
						"type": "string"
					},
					"psbt": {
						"type": "string"
					},
					"signed": {
						"type": "boolean"
					},
					"recipient": {
						"type": "string"
					},
					"amountSats": {
						"type": "number",
						"format": "double"
					},
					"confirmations": {
						"type": "number",
						"format": "double"
					},
					"created": {
						"type": "number",
						"format": "double"
					},
					"updated": {
						"type": "number",
						"format": "double"
					},
					"signature": {
						"type": "string"
					},
					"paymentPublicKey": {
						"type": "string"
					},
					"paymentAddress": {
						"type": "string"
					},
					"mode": {
						"$ref": "#/components/schemas/RevealerTxModes"
					},
					"type": {
						"$ref": "#/components/schemas/RevealerTxTypes"
					}
				},
				"required": [
					"txId",
					"psbt",
					"signed",
					"recipient",
					"amountSats",
					"confirmations",
					"created",
					"updated",
					"paymentPublicKey",
					"paymentAddress",
					"mode",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "revealer-api",
		"version": "1.0.0",
		"description": "Proxy server for ordicall web application to access ordinals and bitcoin servers",
		"license": {
			"name": "ISC"
		},
		"contact": {}
	},
	"openapi": "3.0.0",
	"paths": {
		"/revealer-api/v1/sbtc/init-ui": {
			"get": {
				"operationId": "InitUi",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Fetch objects needed in the UI;\nThe object makes several contract calls and so is \ncached and refreshed every 3 minutes.\nreturns { \n\tkeys:KeySet;\n sbtcContractData:SbtcContractDataType;\n btcFeeRates:FeeEstimateResponse;\n rates:Array<ExchangeRate>\n}",
				"security": [],
				"parameters": []
			}
		},
		"/revealer-api/v1/sbtc/address/balances/{stxAddress}/{cardinal}/{ordinal}": {
			"get": {
				"operationId": "FetchUserBalances",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressObject"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "stxAddress",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "cardinal",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "ordinal",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/revealer-api/v1/commitment/pending/{originator}/{requestType}": {
			"get": {
				"operationId": "GetCommitmentsPendingByOriginator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CommitmentResponse"
								}
							}
						}
					}
				},
				"description": "Fetches the commitment data for a payment address",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "originator",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "requestType",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/revealer-api/v1/commitment/{paymentAddress}": {
			"get": {
				"operationId": "GetCommitmentByPaymentAddress",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CommitmentType"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "paymentAddress",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/revealer-api/v1/commitment/inscription": {
			"post": {
				"operationId": "SaveInscriptionCommitment",
				"responses": {
					"200": {
						"description": "CommitmentResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CommitmentResponse"
								}
							}
						}
					}
				},
				"description": "Build and save the commitment data for a taproot inscription. Return the address for invoice.\nIf payFromAddress is provided also returns a payment psbt for the web wallet.",
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CommitmentRequest"
							}
						}
					}
				}
			}
		},
		"/revealer-api/v1/commitment/sbtc-deposit": {
			"post": {
				"operationId": "SaveSBTCCommitment",
				"responses": {
					"200": {
						"description": "CommitmentResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CommitmentResponse"
								}
							}
						}
					}
				},
				"description": "Build and save the commitment data for an sbtc deposit. Return the address for invoice.\nIf payFromAddress is provided also returns a payment psbt for the web wallet.",
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CommitmentRequest"
							}
						}
					}
				}
			}
		},
		"/revealer-api/v1/op_return/get-psbt-for-deposit/{recipient}/{amountSats}/{paymentPublicKey}/{paymentAddress}/{feeMultiplier}": {
			"get": {
				"operationId": "GetPsbtForDeposit",
				"responses": {
					"200": {
						"description": "unsigned psbt",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PSBTHolder"
								}
							}
						}
					}
				},
				"description": "Build an sBTC deposit PSBT using OP_RETURN for the user to sign and sed.",
				"security": [],
				"parameters": [
					{
						"description": "stacks account or contract principle to receive sBTC",
						"in": "path",
						"name": "recipient",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "amount user wishes to deposit",
						"in": "path",
						"name": "amountSats",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "public key to spend utxos",
						"in": "path",
						"name": "paymentPublicKey",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "also used for change address to send deposit from",
						"in": "path",
						"name": "paymentAddress",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "feeMultiplier",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/revealer-api/v1/op_return/get-psbt-for-withdrawal/{withdrawalAddress}/{signature}/{amountSats}/{paymentPublicKey}/{paymentAddress}/{feeMultiplier}": {
			"get": {
				"operationId": "GetPsbtForWithdrawal",
				"responses": {
					"200": {
						"description": "unsigned psbt",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PSBTHolder"
								}
							}
						}
					}
				},
				"description": "Build an sBTC deposit PSBT using OP_RETURN for the user to sign and sed.",
				"security": [],
				"parameters": [
					{
						"description": "bitcoin address to receive BTC",
						"in": "path",
						"name": "withdrawalAddress",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "signature",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "amount user wishes to deposit",
						"in": "path",
						"name": "amountSats",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "public key to spend utxos",
						"in": "path",
						"name": "paymentPublicKey",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "also used for change address to send deposit from",
						"in": "path",
						"name": "paymentAddress",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "feeMultiplier",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/revealer-api/v1/op_return/broadcast-deposit": {
			"post": {
				"operationId": "SendRawTransaction",
				"responses": {
					"200": {
						"description": "string",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RevealerTransaction"
								}
							}
						}
					}
				},
				"description": "Broadcast signed psbt / transaction. Note the recipient, amount and\npublic key are used to make a temporary unique id. Its possible the user \ncan broadcast the siged psbt outside the bridge but the default case is they\nsig ad broadcast from the bridge app - i which  case we replace the temporary\nunique id with the tx id of the finalised tx. This makes payment lookups a lot simpler",
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"maxFeeRate": {
										"type": "number",
										"format": "double"
									},
									"signedPsbtHex": {
										"type": "string"
									},
									"paymentPublicKey": {
										"type": "string"
									},
									"amountSats": {
										"type": "number",
										"format": "double"
									},
									"recipient": {
										"type": "string"
									}
								},
								"required": [
									"maxFeeRate",
									"signedPsbtHex",
									"paymentPublicKey",
									"amountSats",
									"recipient"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/revealer-api/v1/op_return/client-broadcast-deposit": {
			"post": {
				"operationId": "ClientBroadcastDeposit",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RevealerTransaction"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"maxFeeRate": {
										"type": "number",
										"format": "double"
									},
									"signedPsbtHex": {
										"type": "string"
									},
									"paymentPublicKey": {
										"type": "string"
									},
									"amountSats": {
										"type": "number",
										"format": "double"
									},
									"recipient": {
										"type": "string"
									},
									"txId": {
										"type": "string"
									}
								},
								"required": [
									"maxFeeRate",
									"signedPsbtHex",
									"paymentPublicKey",
									"amountSats",
									"recipient",
									"txId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}